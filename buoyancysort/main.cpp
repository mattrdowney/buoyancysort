#include "stdafx.h"
#include <algorithm>
#include <functional>
#include <iostream>
#include <map>
#include <math.h>
#include <random>
#include <set>
#include <utility>
#include "bubble-sort.h"
#include "buoyancysort.h"
#include "comb-sort.h"
#include "heap-tests.h"
#include "hoare-partition.h"
#include "hybrid-hierarchysort.h"
#include "in-place-hierarchysort.h"
#include "insertion-sort.h"
#include "int-that-tracks-comparisons.h"
#include "interlaced-double-binary-heap.h"
#include "interlaced-entangled-double-binary-heap.h"
#include "max-heap.h"
#include "median-of-medians.h"
#include "min-heap.h"
#include "ordered-max-heap.h"
#include "ordered-min-heap.h"
#include "out-of-place-hierarchysort.h"
#include "print.h"
#include "quicksort.h"
#include "reverse.h"
#include "semi-stable-partition.h"
#include "shell-sort.h"
#include "sift.h"
#include "sorted.h"
#include "spindle.h"
#include "stable-partition.h"

//typedef int current_type;
typedef IntThatTracksComparisons::IntThatTracksComparisons current_type;

int main()
{
	//HeapTests::heap_tests();
	const long size = 1000000;
	const long tuple_size = 2;
	std::vector<current_type> data(size);
	for (std::size_t i = 0; i < size; i += 1)
	{
		/*if ((i % 2) == 0)
		{
			data[i] = size/2;
			continue;
		}*/
		data[i] = size - i;
	}
	
	std::random_device random_device;
	std::mt19937 random_number_generator(random_device());
	random_number_generator.seed(26);
	std::shuffle(&data[0], (&data[size-1]) + 1, random_number_generator);
	
	//Print::print((current_type*)data.data(), -1, size);
	
	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);

	//IntThatTracksComparisons::reset_comparisons();

	//Hierarchysort::in_place<current_type>((current_type*)data.data(), -1, size);
	std::vector<long> gap_sequence1 = ShellSort::highway_13_shellsort_gap_sequence;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::generalized_ciura4, 25);
	std::vector<long> gap_sequence2 = ShellSort::highway_13_shellsort_gap_sequence;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::extrapolated_ciura, 20);
	//std::vector<long> gap_sequence2 = ShellSort::extrapolated_ciura_tokuda3;
	//ShellSort::empirical_comparison_range(gap_sequence1, gap_sequence2, 45000, 120000, 40991, 41200, 41);
	//ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 2, 100, 10000);
	ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 3900, 9750, 1557, 1557-50, 1557+50, 3000);

	//1, 4, 13, 36, 70, 258, 673, 1745, 30577975:30834043 (256068) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 100, 250, 96, 70, 120, 20000);
	//1, 4, 13, 36, 71, 258, 673, 1745, 30611532 : 30907968 (296436)
	//1, 4, 13, 36, 72, 258, 673, 1745, 30610513 : 31864675 (1254162)
	//1, 4, 13, 36, 73, 258, 673, 1745, 30587804 : 30835956 (248152)
	//1, 4, 13, 36, 74, 258, 673, 1745, 30587516 : 30793269 (205753)
	//1, 4, 13, 36, 75, 258, 673, 1745, 30611353 : 31195954 (584601)
	//1, 4, 13, 36, 76, 258, 673, 1745, 30613433 : 30804778 (191345)
	//1, 4, 13, 36, 77, 258, 673, 1745, 30615368 : 30822756 (207388)
	//1, 4, 13, 36, 78, 258, 673, 1745, 30578385 : 30787342 (208957)
	//1, 4, 13, 36, 79, 258, 673, 1745, 30587396 : 30756985 (169589)
	//1, 4, 13, 36, 80, 258, 673, 1745, 30609789 : 30759974 (150185)
	//1, 4, 13, 36, 81, 258, 673, 1745, 30615320 : 30750859 (135539)
	//1, 4, 13, 36, 82, 258, 673, 1745, 30615476 : 31065961 (450485)
	//1, 4, 13, 36, 83, 258, 673, 1745, 30612062 : 30687926 (75864)
	//1, 4, 13, 36, 84, 258, 673, 1745, 30612156 : 30722689 (110533)
	//1, 4, 13, 36, 85, 258, 673, 1745, 30587455 : 31163075 (575620)
	//1, 4, 13, 36, 86, 258, 673, 1745, 30612058 : 30669026 (56968)
	//1, 4, 13, 36, 87, 258, 673, 1745, 30614525 : 30663136 (48611)
	//1, 4, 13, 36, 88, 258, 673, 1745, 30608852 : 30891794 (282942)
	//1, 4, 13, 36, 89, 258, 673, 1745, 30586393 : 30620217 (33824)
	//1, 4, 13, 36, 90, 258, 673, 1745, 30608811 : 30671170 (62359)
	//1, 4, 13, 36, 91, 258, 673, 1745, 30612058 : 30668951 (56893)
	//1, 4, 13, 36, 92, 258, 673, 1745, 30612002 : 30736986 (124984)
	//1, 4, 13, 36, 93, 258, 673, 1745, 30588037 : 30603214 (15177)
	//1, 4, 13, 36, 94, 258, 673, 1745, 30617241 : 30649471 (32230)
	//1, 4, 13, 36, 95, 258, 673, 1745, 30609789 : 31050367 (440578)
	//1, 4, 13, 36, 96, 258, 673, 1745, 30611937 : 30611937 (0)
	//1, 4, 13, 36, 97, 258, 673, 1745, 30606707 : 30641291 (34584)
	//1, 4, 13, 36, 98, 258, 673, 1745, 30611532 : 30993669 (382137)
	//1, 4, 13, 36, 99, 258, 673, 1745, 30612744 : 30624075 (11331)
	//1, 4, 13, 36, 100, 258, 673, 1745, 30615244 : 30636023 (20779)
	//1, 4, 13, 36, 101, 258, 673, 1745, 30589091 : 30739655 (150564)
	//1, 4, 13, 36, 102, 258, 673, 1745, 30609789 : 30652807 (43018)
	//1, 4, 13, 36, 103, 258, 673, 1745, 30614286 : 30636959 (22673)
	//1, 4, 13, 36, 104, 258, 673, 1745, 30587593 : 30648250 (60657)
	//1, 4, 13, 36, 105, 258, 673, 1745, 30609626 : 30817691 (208065)
	//1, 4, 13, 36, 106, 258, 673, 1745, 30587396 : 30619819 (32423)
	//1, 4, 13, 36, 107, 258, 673, 1745, 30588157 : 30654531 (66374)
	//1, 4, 13, 36, 108, 258, 673, 1745, 30576860 : 31203689 (626829)
	//1, 4, 13, 36, 109, 258, 673, 1745, 30614263 : 30666563 (52300)
	//1, 4, 13, 36, 110, 258, 673, 1745, 30614512 : 30673424 (58912)
	//1, 4, 13, 36, 111, 258, 673, 1745, 30614263 : 30877100 (262837)
	//1, 4, 13, 36, 112, 258, 673, 1745, 30611622 : 30641301 (29679)
	//1, 4, 13, 36, 113, 258, 673, 1745, 30616877 : 30662091 (45214)
	//1, 4, 13, 36, 114, 258, 673, 1745, 30612079 : 30703351 (91272)
	//1, 4, 13, 36, 115, 258, 673, 1745, 30611006 : 30665957 (54951)
	//1, 4, 13, 36, 116, 258, 673, 1745, 30610012 : 30625733 (15721)
	//1, 4, 13, 36, 117, 258, 673, 1745, 30611278 : 30645704 (34426)
	//1, 4, 13, 36, 118, 258, 673, 1745, 30615944 : 30842883 (226939)
	//1, 4, 13, 36, 119, 258, 673, 1745, 30615944 : 30625529 (9585)
	//1, 4, 13, 36, 120, 258, 673, 1745, 30574760 : 30588498 (13738)

	//1, 4, 13, 36, 96, 230, 673, 1745, 23551319:23642313 (90994) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 260, 600, 247, 230, 260, 5000);
	//1, 4, 13, 36, 96, 231, 673, 1745, 23507479 : 23592723 (85244)
	//1, 4, 13, 36, 96, 232, 673, 1745, 23538454 : 23555626 (17172)
	//1, 4, 13, 36, 96, 233, 673, 1745, 23506202 : 23540070 (33868)
	//1, 4, 13, 36, 96, 234, 673, 1745, 23529694 : 23559141 (29447)
	//1, 4, 13, 36, 96, 235, 673, 1745, 23538491 : 23558096 (19605)
	//1, 4, 13, 36, 96, 236, 673, 1745, 23539119 : 23579279 (40160)
	//1, 4, 13, 36, 96, 237, 673, 1745, 23550503 : 23589727 (39224)
	//1, 4, 13, 36, 96, 238, 673, 1745, 23530230 : 23621184 (90954)
	//1, 4, 13, 36, 96, 239, 673, 1745, 23489450 : 23593405 (103955)
	//1, 4, 13, 36, 96, 240, 673, 1745, 23510321 : 23717989 (207668)
	//1, 4, 13, 36, 96, 241, 673, 1745, 23527688 : 23628911 (101223)
	//1, 4, 13, 36, 96, 242, 673, 1745, 23521333 : 23588204 (66871)
	//1, 4, 13, 36, 96, 243, 673, 1745, 23541803 : 23585684 (43881)
	//1, 4, 13, 36, 96, 244, 673, 1745, 23528822 : 23568494 (39672)
	//1, 4, 13, 36, 96, 245, 673, 1745, 23499255 : 23508648 (9393)
	//1, 4, 13, 36, 96, 246, 673, 1745, 23527979 : 23538725 (10746)
	//1, 4, 13, 36, 96, 247, 673, 1745, 23510111 : 23510111 (0) // why did I type in 247 instead of 258? I was inspired by Sedgewick's gap sequence: https://oeis.org/A033622 (when I realized 96 = 19*5 + 1) // On some level this was sort of lame because I wanted Fermat Numbers + 1 and primes to be a pattern in the sequence
	//1, 4, 13, 36, 96, 248, 673, 1745, 23518809 : 23546107 (27298)
	//1, 4, 13, 36, 96, 249, 673, 1745, 23557442 : 23594836 (37394)
	//1, 4, 13, 36, 96, 250, 673, 1745, 23530881 : 23584251 (53370)
	//1, 4, 13, 36, 96, 251, 673, 1745, 23536996 : 23637736 (100740)
	//1, 4, 13, 36, 96, 252, 673, 1745, 23531848 : 23779654 (247806)
	//1, 4, 13, 36, 96, 253, 673, 1745, 23543326 : 23604513 (61187)
	//1, 4, 13, 36, 96, 254, 673, 1745, 23521252 : 23592349 (71097)
	//1, 4, 13, 36, 96, 255, 673, 1745, 23506308 : 23533939 (27631)
	//1, 4, 13, 36, 96, 256, 673, 1745, 23512442 : 23535353 (22911)
	//1, 4, 13, 36, 96, 257, 673, 1745, 23494318 : 23510101 (15783)
	//1, 4, 13, 36, 96, 258, 673, 1745, 23536403 : 23541014 (4611)
	//1, 4, 13, 36, 96, 259, 673, 1745, 23500625 : 23526045 (25420)
	//1, 4, 13, 36, 96, 260, 673, 1745, 23500220 : 23511270 (11050)

	// I'm sort of convinced if I combine this "prime highway 13" and "prime highway 23" in some fashion (perhaps alternating) I should be able to achieve O(nlgn) in the worst case for ShellSort.

	//1, 4, 13, 36, 96, 247, 613, 1745, 14670265:14676717 (6452) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 640, 1600, 673, 673 - 60, 673 + 15, 1000);
	//1, 4, 13, 36, 96, 247, 614, 1745, 15237906 : 15326641 (88735)
	//1, 4, 13, 36, 96, 247, 615, 1745, 14810577 : 14803945 (-6632)
	//1, 4, 13, 36, 96, 247, 616, 1745, 14829300 : 14842600 (13300)
	//1, 4, 13, 36, 96, 247, 617, 1745, 14824541 : 14822956 (-1585)
	//1, 4, 13, 36, 96, 247, 618, 1745, 14635501 : 14632455 (-3046)
	//1, 4, 13, 36, 96, 247, 619, 1745, 14887296 : 14934013 (46717)
	//1, 4, 13, 36, 96, 247, 620, 1745, 14663076 : 14667974 (4898)
	//1, 4, 13, 36, 96, 247, 621, 1745, 14862860 : 14913186 (50326)
	//1, 4, 13, 36, 96, 247, 622, 1745, 14934136 : 14937441 (3305)
	//1, 4, 13, 36, 96, 247, 623, 1745, 14656334 : 14669308 (12974)
	//1, 4, 13, 36, 96, 247, 624, 1745, 14823963 : 14831603 (7640)
	//1, 4, 13, 36, 96, 247, 625, 1745, 14784533 : 14782140 (-2393)
	//1, 4, 13, 36, 96, 247, 626, 1745, 14777537 : 14858305 (80768)
	//1, 4, 13, 36, 96, 247, 627, 1745, 14977280 : 14985567 (8287)
	//1, 4, 13, 36, 96, 247, 628, 1745, 14849112 : 14866435 (17323)
	//1, 4, 13, 36, 96, 247, 629, 1745, 14901840 : 14901373 (-467)
	//1, 4, 13, 36, 96, 247, 630, 1745, 14866839 : 14866034 (-805)
	//1, 4, 13, 36, 96, 247, 631, 1745, 14983349 : 15065327 (81978)
	//1, 4, 13, 36, 96, 247, 632, 1745, 14892607 : 14899192 (6585)
	//1, 4, 13, 36, 96, 247, 633, 1745, 14810501 : 14858637 (48136)
	//1, 4, 13, 36, 96, 247, 634, 1745, 14838380 : 14851440 (13060)
	//1, 4, 13, 36, 96, 247, 635, 1745, 14657880 : 14655590 (-2290)
	//1, 4, 13, 36, 96, 247, 636, 1745, 14637110 : 14658712 (21602)
	//1, 4, 13, 36, 96, 247, 637, 1745, 14692134 : 14684253 (-7881)
	//1, 4, 13, 36, 96, 247, 638, 1745, 14819213 : 14886510 (67297)
	//1, 4, 13, 36, 96, 247, 639, 1745, 15002944 : 15003468 (524)
	//1, 4, 13, 36, 96, 247, 640, 1745, 14810242 : 14836791 (26549)
	//1, 4, 13, 36, 96, 247, 641, 1745, 14793032 : 14804973 (11941)
	//1, 4, 13, 36, 96, 247, 642, 1745, 14667800 : 14665850 (-1950)
	//1, 4, 13, 36, 96, 247, 643, 1745, 15234637 : 15281608 (46971)
	//1, 4, 13, 36, 96, 247, 644, 1745, 14634202 : 14639238 (5036)
	//1, 4, 13, 36, 96, 247, 645, 1745, 14796504 : 14931508 (135004)
	//1, 4, 13, 36, 96, 247, 646, 1745, 14952821 : 14956429 (3608)
	//1, 4, 13, 36, 96, 247, 647, 1745, 15277539 : 15283932 (6393)
	//1, 4, 13, 36, 96, 247, 648, 1745, 14677249 : 14689096 (11847)
	//1, 4, 13, 36, 96, 247, 649, 1745, 14874007 : 14884903 (10896)
	//1, 4, 13, 36, 96, 247, 650, 1745, 14831676 : 14906999 (75323)
	//1, 4, 13, 36, 96, 247, 651, 1745, 14669199 : 14666029 (-3170)
	//1, 4, 13, 36, 96, 247, 652, 1745, 14989200 : 14996919 (7719)
	//1, 4, 13, 36, 96, 247, 653, 1745, 14634436 : 14633876 (-560)
	//1, 4, 13, 36, 96, 247, 654, 1745, 14990723 : 14988953 (-1770)
	//1, 4, 13, 36, 96, 247, 655, 1745, 14809479 : 14842894 (33415)
	//1, 4, 13, 36, 96, 247, 656, 1745, 14861361 : 14855458 (-5903)
	//1, 4, 13, 36, 96, 247, 657, 1745, 14610248 : 14664155 (53907)
	//1, 4, 13, 36, 96, 247, 658, 1745, 14615619 : 14611389 (-4230)
	//1, 4, 13, 36, 96, 247, 659, 1745, 14804735 : 14811439 (6704)
	//1, 4, 13, 36, 96, 247, 660, 1745, 14635060 : 14647776 (12716)
	//1, 4, 13, 36, 96, 247, 661, 1745, 14678636 : 14670730 (-7906)
	//1, 4, 13, 36, 96, 247, 662, 1745, 14727195 : 14794585 (67390)
	//1, 4, 13, 36, 96, 247, 663, 1745, 14635364 : 14647723 (12359)
	//1, 4, 13, 36, 96, 247, 664, 1745, 14679444 : 14708377 (28933)
	//1, 4, 13, 36, 96, 247, 665, 1745, 14847226 : 14842420 (-4806)
	//1, 4, 13, 36, 96, 247, 666, 1745, 14668289 : 14674939 (6650)
	//1, 4, 13, 36, 96, 247, 667, 1745, 14635364 : 14672055 (36691)
	//1, 4, 13, 36, 96, 247, 668, 1745, 14868196 : 14865550 (-2646)
	//1, 4, 13, 36, 96, 247, 669, 1745, 14829300 : 14878811 (49511)
	//1, 4, 13, 36, 96, 247, 670, 1745, 14964366 : 14959564 (-4802)
	//1, 4, 13, 36, 96, 247, 671, 1745, 14996466 : 14997378 (912)
	//1, 4, 13, 36, 96, 247, 672, 1745, 14970615 : 14973279 (2664)
	//1, 4, 13, 36, 96, 247, 673, 1745, 14974491 : 14974491 (0)
	//1, 4, 13, 36, 96, 247, 674, 1745, 14615727 : 14685139 (69412)
	//1, 4, 13, 36, 96, 247, 675, 1745, 14669641 : 14675671 (6030)
	//1, 4, 13, 36, 96, 247, 676, 1745, 14908769 : 14931594 (22825)
	//1, 4, 13, 36, 96, 247, 677, 1745, 14806747 : 14811263 (4516)
	//1, 4, 13, 36, 96, 247, 678, 1745, 14621992 : 14622026 (34)
	//1, 4, 13, 36, 96, 247, 679, 1745, 14710532 : 14751157 (40625)
	//1, 4, 13, 36, 96, 247, 680, 1745, 14793032 : 14802846 (9814)
	//1, 4, 13, 36, 96, 247, 681, 1745, 14705733 : 14754246 (48513)
	//1, 4, 13, 36, 96, 247, 682, 1745, 14984772 : 14981306 (-3466)
	//1, 4, 13, 36, 96, 247, 683, 1745, 14975881 : 14979338 (3457)
	//1, 4, 13, 36, 96, 247, 684, 1745, 14757794 : 14772075 (14281)
	//1, 4, 13, 36, 96, 247, 685, 1745, 14798324 : 14798506 (182)
	//1, 4, 13, 36, 96, 247, 686, 1745, 14803275 : 14934696 (131421)
	//1, 4, 13, 36, 96, 247, 687, 1745, 14821737 : 14822227 (490)
	//1, 4, 13, 36, 96, 247, 688, 1745, 14817238 : 14844094 (26856)

	//1, 4, 13, 36, 96, 247, 597, 1745, 14654991:14700161 (45170) //ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 640, 1600, 637, 637-40, 637+30, 1000);
	//1, 4, 13, 36, 96, 247, 598, 1745, 14787006 : 14805105 (18099)
	//1, 4, 13, 36, 96, 247, 599, 1745, 14776384 : 14787387 (11003)
	//1, 4, 13, 36, 96, 247, 600, 1745, 14977541 : 15004805 (27264)
	//1, 4, 13, 36, 96, 247, 601, 1745, 14685706 : 14697834 (12128)
	//1, 4, 13, 36, 96, 247, 602, 1745, 14792846 : 14868209 (75363)
	//1, 4, 13, 36, 96, 247, 603, 1745, 14889196 : 14899344 (10148)
	//1, 4, 13, 36, 96, 247, 604, 1745, 14646524 : 14700515 (53991)
	//1, 4, 13, 36, 96, 247, 605, 1745, 14796414 : 14811710 (15296)
	//1, 4, 13, 36, 96, 247, 606, 1745, 14673848 : 14701809 (27961)
	//1, 4, 13, 36, 96, 247, 607, 1745, 14795352 : 14846696 (51344)
	//1, 4, 13, 36, 96, 247, 608, 1745, 14773160 : 14789513 (16353)
	//1, 4, 13, 36, 96, 247, 609, 1745, 15275586 : 15351682 (76096)
	//1, 4, 13, 36, 96, 247, 610, 1745, 14952775 : 14968649 (15874)
	//1, 4, 13, 36, 96, 247, 611, 1745, 14695116 : 14724374 (29258)
	//1, 4, 13, 36, 96, 247, 612, 1745, 14666929 : 14694582 (27653)
	//1, 4, 13, 36, 96, 247, 613, 1745, 14883340 : 14895471 (12131)
	//1, 4, 13, 36, 96, 247, 614, 1745, 14685706 : 14773378 (87672)
	//1, 4, 13, 36, 96, 247, 615, 1745, 14868667 : 14878316 (9649)
	//1, 4, 13, 36, 96, 247, 616, 1745, 15292130 : 15311356 (19226)
	//1, 4, 13, 36, 96, 247, 617, 1745, 14864964 : 14877579 (12615)
	//1, 4, 13, 36, 96, 247, 618, 1745, 14780713 : 14778810 (-1903)
	//1, 4, 13, 36, 96, 247, 619, 1745, 14967490 : 15021290 (53800)
	//1, 4, 13, 36, 96, 247, 620, 1745, 14941967 : 14952786 (10819)
	//1, 4, 13, 36, 96, 247, 621, 1745, 14809503 : 14865910 (56407)
	//1, 4, 13, 36, 96, 247, 622, 1745, 14656003 : 14663634 (7631)
	//1, 4, 13, 36, 96, 247, 623, 1745, 14971902 : 14985191 (13289)
	//1, 4, 13, 36, 96, 247, 624, 1745, 14674537 : 14690832 (16295)
	//1, 4, 13, 36, 96, 247, 625, 1745, 14778441 : 14783803 (5362)
	//1, 4, 13, 36, 96, 247, 626, 1745, 14754261 : 14839875 (85614)
	//1, 4, 13, 36, 96, 247, 627, 1745, 14806316 : 14825041 (18725)
	//1, 4, 13, 36, 96, 247, 628, 1745, 15199066 : 15215272 (16206)
	//1, 4, 13, 36, 96, 247, 629, 1745, 14660664 : 14670780 (10116)
	//1, 4, 13, 36, 96, 247, 630, 1745, 14809347 : 14814666 (5319)
	//1, 4, 13, 36, 96, 247, 631, 1745, 14650390 : 14727577 (77187)
	//1, 4, 13, 36, 96, 247, 632, 1745, 14820811 : 14836464 (15653)
	//1, 4, 13, 36, 96, 247, 633, 1745, 14724646 : 14776564 (51918)
	//1, 4, 13, 36, 96, 247, 634, 1745, 14798410 : 14809969 (11559)
	//1, 4, 13, 36, 96, 247, 635, 1745, 14995996 : 15005839 (9843)
	//1, 4, 13, 36, 96, 247, 636, 1745, 14906952 : 14931499 (24547)
	//1, 4, 13, 36, 96, 247, 637, 1745, 14783310 : 14783310 (0)
	//1, 4, 13, 36, 96, 247, 638, 1745, 14969275 : 15046148 (76873)
	//1, 4, 13, 36, 96, 247, 639, 1745, 14902694 : 14913404 (10710)
	//1, 4, 13, 36, 96, 247, 640, 1745, 14667544 : 14691429 (23885)
	//1, 4, 13, 36, 96, 247, 641, 1745, 14802680 : 14817904 (15224)
	//1, 4, 13, 36, 96, 247, 642, 1745, 14811251 : 14820196 (8945)
	//1, 4, 13, 36, 96, 247, 643, 1745, 14998611 : 15039633 (41022)
	//1, 4, 13, 36, 96, 247, 644, 1745, 14886778 : 14908619 (21841)
	//1, 4, 13, 36, 96, 247, 645, 1745, 14947503 : 15090259 (142756)
	//1, 4, 13, 36, 96, 247, 646, 1745, 14816362 : 14832173 (15811)
	//1, 4, 13, 36, 96, 247, 647, 1745, 15223609 : 15228960 (5351)
	//1, 4, 13, 36, 96, 247, 648, 1745, 14975923 : 14987994 (12071)
	//1, 4, 13, 36, 96, 247, 649, 1745, 14942126 : 14952850 (10724)
	//1, 4, 13, 36, 96, 247, 650, 1745, 14793600 : 14875527 (81927)
	//1, 4, 13, 36, 96, 247, 651, 1745, 14660664 : 14657145 (-3519)
	//1, 4, 13, 36, 96, 247, 652, 1745, 14883034 : 14900738 (17704)
	//1, 4, 13, 36, 96, 247, 653, 1745, 14825746 : 14827994 (2248)
	//1, 4, 13, 36, 96, 247, 654, 1745, 14817997 : 14823735 (5738)
	//1, 4, 13, 36, 96, 247, 655, 1745, 14979833 : 15026039 (46206)
	//1, 4, 13, 36, 96, 247, 656, 1745, 14802056 : 14808459 (6403)
	//1, 4, 13, 36, 96, 247, 657, 1745, 14814375 : 14879368 (64993)
	//1, 4, 13, 36, 96, 247, 658, 1745, 14701991 : 14702499 (508)
	//1, 4, 13, 36, 96, 247, 659, 1745, 14790279 : 14801609 (11330)
	//1, 4, 13, 36, 96, 247, 660, 1745, 14785237 : 14801972 (16735)
	//1, 4, 13, 36, 96, 247, 661, 1745, 14675117 : 14674529 (-588)
	//1, 4, 13, 36, 96, 247, 662, 1745, 14816549 : 14889522 (72973)
	//1, 4, 13, 36, 96, 247, 663, 1745, 14605189 : 14619391 (14202)
	//1, 4, 13, 36, 96, 247, 664, 1745, 14997830 : 15029563 (31733)
	//1, 4, 13, 36, 96, 247, 665, 1745, 14953814 : 14958292 (4478)
	//1, 4, 13, 36, 96, 247, 666, 1745, 14686038 : 14692625 (6587)
	//1, 4, 13, 36, 96, 247, 667, 1745, 14683661 : 14721074 (37413)

	// 1, 4, 13, 36, 96, 247, 618, 1745, 150790511:150785245 (-5266) //ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 640, 1600, 651, 618, 618, 10000); 
    //1, 4, 13, 36, 96, 247, 661, 1745, 150997698:151000686 (2988) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 640, 1600, 618, 661, 661, 10000);

	//1, 4, 13, 36, 96, 247, 618, 1495, 64530629:64282987 (-247642)
	//1, 4, 13, 36, 96, 247, 618, 1496, 63252718 : 63256698 (3980)
	//1, 4, 13, 36, 96, 247, 618, 1497, 63998679 : 64090583 (91904)
	//1, 4, 13, 36, 96, 247, 618, 1498, 64567985 : 64323659 (-244326)
	//1, 4, 13, 36, 96, 247, 618, 1499, 62826451 : 62531367 (-295084)
	//1, 4, 13, 36, 96, 247, 618, 1500, 64127132 : 63770880 (-356252)
	//1, 4, 13, 36, 96, 247, 618, 1501, 63182620 : 62819971 (-362649)
	//1, 4, 13, 36, 96, 247, 618, 1502, 63526766 : 63163998 (-362768)
	//1, 4, 13, 36, 96, 247, 618, 1503, 63646934 : 63388256 (-258678)
	//1, 4, 13, 36, 96, 247, 618, 1504, 63001382 : 62675082 (-326300)
	//1, 4, 13, 36, 96, 247, 618, 1505, 63053480 : 62679781 (-373699)
	//1, 4, 13, 36, 96, 247, 618, 1506, 63655109 : 63322547 (-332562)
	//1, 4, 13, 36, 96, 247, 618, 1507, 62436649 : 62209426 (-227223)
	//1, 4, 13, 36, 96, 247, 618, 1508, 63183520 : 62801012 (-382508)
	//1, 4, 13, 36, 96, 247, 618, 1509, 61334340 : 61024723 (-309617)
	//1, 4, 13, 36, 96, 247, 618, 1510, 63070698 : 63245860 (175162)
	//1, 4, 13, 36, 96, 247, 618, 1511, 64840076 : 65025156 (185080)
	//1, 4, 13, 36, 96, 247, 618, 1512, 61274956 : 61041379 (-233577)
	//1, 4, 13, 36, 96, 247, 618, 1513, 63754349 : 63341788 (-412561)
	//1, 4, 13, 36, 96, 247, 618, 1514, 63844017 : 63405677 (-438340)
	//1, 4, 13, 36, 96, 247, 618, 1515, 63021047 : 62736008 (-285039)
	//1, 4, 13, 36, 96, 247, 618, 1516, 63330678 : 62991245 (-339433)
	//1, 4, 13, 36, 96, 247, 618, 1517, 63000928 : 62673511 (-327417)
	//1, 4, 13, 36, 96, 247, 618, 1518, 64151266 : 63781224 (-370042)
	//1, 4, 13, 36, 96, 247, 618, 1519, 63799178 : 63528062 (-271116)
	//1, 4, 13, 36, 96, 247, 618, 1520, 63486687 : 63119023 (-367664)
	//1, 4, 13, 36, 96, 247, 618, 1521, 64979409 : 64498345 (-481064)
	//1, 4, 13, 36, 96, 247, 618, 1522, 64059041 : 63660814 (-398227)
	//1, 4, 13, 36, 96, 247, 618, 1523, 64267043 : 64031769 (-235274)
	//1, 4, 13, 36, 96, 247, 618, 1524, 63185208 : 63456424 (271216)
	//1, 4, 13, 36, 96, 247, 618, 1525, 65502335 : 65314637 (-187698)
	//1, 4, 13, 36, 96, 247, 618, 1526, 62612284 : 62314212 (-298072)
	//1, 4, 13, 36, 96, 247, 618, 1527, 62699737 : 62385745 (-313992)
	//1, 4, 13, 36, 96, 247, 618, 1528, 63681369 : 63231267 (-450102)
	//1, 4, 13, 36, 96, 247, 618, 1529, 65303765 : 64936834 (-366931)
	//1, 4, 13, 36, 96, 247, 618, 1530, 65239804 : 64768255 (-471549)
	//1, 4, 13, 36, 96, 247, 618, 1531, 63261311 : 63034882 (-226429)
	//1, 4, 13, 36, 96, 247, 618, 1532, 63351087 : 62962918 (-388169)
	//1, 4, 13, 36, 96, 247, 618, 1533, 63857573 : 63438182 (-419391)
	//1, 4, 13, 36, 96, 247, 618, 1534, 66174727 : 65715746 (-458981)
	//1, 4, 13, 36, 96, 247, 618, 1535, 64095909 : 63753539 (-342370)
	//1, 4, 13, 36, 96, 247, 618, 1536, 63218320 : 62920383 (-297937)
	//1, 4, 13, 36, 96, 247, 618, 1537, 62523209 : 62337662 (-185547)
	//1, 4, 13, 36, 96, 247, 618, 1538, 62928751 : 63251154 (322403)
	//1, 4, 13, 36, 96, 247, 618, 1539, 63635690 : 63527630 (-108060)
	//1, 4, 13, 36, 96, 247, 618, 1540, 64897621 : 64463021 (-434600)
	//1, 4, 13, 36, 96, 247, 618, 1541, 63525892 : 63103691 (-422201)
	//1, 4, 13, 36, 96, 247, 618, 1542, 64116181 : 63677112 (-439069)
	//1, 4, 13, 36, 96, 247, 618, 1543, 65611377 : 65281854 (-329523)
	//1, 4, 13, 36, 96, 247, 618, 1544, 62761833 : 62370081 (-391752)
	//1, 4, 13, 36, 96, 247, 618, 1545, 64981295 : 64981295 (0)
	//1, 4, 13, 36, 96, 247, 618, 1546, 63541498 : 63152340 (-389158)
	//1, 4, 13, 36, 96, 247, 618, 1547, 63452136 : 63172774 (-279362)
	//1, 4, 13, 36, 96, 247, 618, 1548, 63400666 : 63064110 (-336556)
	//1, 4, 13, 36, 96, 247, 618, 1549, 63575226 : 63121530 (-453696)
	//1, 4, 13, 36, 96, 247, 618, 1550, 62070524 : 61741988 (-328536)
	//1, 4, 13, 36, 96, 247, 618, 1551, 63698603 : 63780031 (81428)
	//1, 4, 13, 36, 96, 247, 618, 1552, 62365879 : 62454407 (88528)
	//1, 4, 13, 36, 96, 247, 618, 1553, 63111763 : 62819251 (-292512)
	//1, 4, 13, 36, 96, 247, 618, 1554, 62210259 : 61900583 (-309676)
	//1, 4, 13, 36, 96, 247, 618, 1555, 63244797 : 62963493 (-281304)
	//1, 4, 13, 36, 96, 247, 618, 1556, 63723220 : 63358261 (-364959)
	//1, 4, 13, 36, 96, 247, 618, 1557, 66174727 : 65656429 (-518298)
	//1, 4, 13, 36, 96, 247, 618, 1558, 63742124 : 63400475 (-341649)
	//1, 4, 13, 36, 96, 247, 618, 1559, 63004667 : 62747467 (-257200)
	//1, 4, 13, 36, 96, 247, 618, 1560, 63440846 : 63069425 (-371421)
	//1, 4, 13, 36, 96, 247, 618, 1561, 63895078 : 63427005 (-468073)
	//1, 4, 13, 36, 96, 247, 618, 1562, 62322259 : 62011420 (-310839)
	//1, 4, 13, 36, 96, 247, 618, 1563, 64089596 : 63761684 (-327912)
	//1, 4, 13, 36, 96, 247, 618, 1564, 64094119 : 63752206 (-341913)
	//1, 4, 13, 36, 96, 247, 618, 1565, 63578067 : 63637963 (59896)
	//1, 4, 13, 36, 96, 247, 618, 1566, 62092568 : 62136418 (43850)
	//1, 4, 13, 36, 96, 247, 618, 1567, 63790798 : 63585847 (-204951)
	//1, 4, 13, 36, 96, 247, 618, 1568, 63809550 : 63336949 (-472601)
	//1, 4, 13, 36, 96, 247, 618, 1569, 63723220 : 63260528 (-462692)
	//1, 4, 13, 36, 96, 247, 618, 1570, 64059041 : 63713041 (-346000)
	//1, 4, 13, 36, 96, 247, 618, 1571, 64337452 : 63954929 (-382523)
	//1, 4, 13, 36, 96, 247, 618, 1572, 64119787 : 63722399 (-397388)
	//1, 4, 13, 36, 96, 247, 618, 1573, 62717584 : 62249945 (-467639)
	//1, 4, 13, 36, 96, 247, 618, 1574, 63743845 : 63382657 (-361188)
	//1, 4, 13, 36, 96, 247, 618, 1575, 62738522 : 62402638 (-335884)
	//1, 4, 13, 36, 96, 247, 618, 1576, 63858788 : 63370864 (-487924)
	//1, 4, 13, 36, 96, 247, 618, 1577, 63083197 : 62647586 (-435611)
	//1, 4, 13, 36, 96, 247, 618, 1578, 61509336 : 61256869 (-252467)
	//1, 4, 13, 36, 96, 247, 618, 1579, 63723870 : 64037403 (313533)
	//1, 4, 13, 36, 96, 247, 618, 1580, 63781564 : 63641437 (-140127)
	//1, 4, 13, 36, 96, 247, 618, 1581, 62574847 : 62190862 (-383985)
	//1, 4, 13, 36, 96, 247, 618, 1582, 63166886 : 62783826 (-383060)
	//1, 4, 13, 36, 96, 247, 618, 1583, 63452402 : 63074361 (-378041)
	//1, 4, 13, 36, 96, 247, 618, 1584, 63716780 : 63373046 (-343734)
	//1, 4, 13, 36, 96, 247, 618, 1585, 63569323 : 63123586 (-445737)
	//1, 4, 13, 36, 96, 247, 618, 1586, 62252547 : 61952871 (-299676)
	//1, 4, 13, 36, 96, 247, 618, 1587, 63943053 : 63569849 (-373204)
	//1, 4, 13, 36, 96, 247, 618, 1588, 63756389 : 63336734 (-419655)
	//1, 4, 13, 36, 96, 247, 618, 1589, 63074582 : 62636884 (-437698)
	//1, 4, 13, 36, 96, 247, 618, 1590, 62721650 : 62296196 (-425454)
	//1, 4, 13, 36, 96, 247, 618, 1591, 64817913 : 64462134 (-355779)
	//1, 4, 13, 36, 96, 247, 618, 1592, 63581960 : 63435686 (-146274)
	//1, 4, 13, 36, 96, 247, 618, 1593, 63186414 : 63240257 (53843)
	//1, 4, 13, 36, 96, 247, 618, 1594, 62630419 : 62395743 (-234676)
	//1, 4, 13, 36, 96, 247, 618, 1595, 64173258 : 63782508 (-390750)

	//1, 4, 13, 36, 96, 247, 618, 1507, 378011468:379049782 (1038314) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 3900, 9750, 1557, 1557-50, 1557+50, 3000);
	//1, 4, 13, 36, 96, 247, 618, 1508, 379833476 : 380106632 (273156)
	//1, 4, 13, 36, 96, 247, 618, 1509, 376309038 : 376683970 (374932)
	//1, 4, 13, 36, 96, 247, 618, 1510, 380890109 : 384485016 (3594907)
	//1, 4, 13, 36, 96, 247, 618, 1511, 377576531 : 381720427 (4143896)
	//1, 4, 13, 36, 96, 247, 618, 1512, 381253742 : 382312277 (1058535)
	//1, 4, 13, 36, 96, 247, 618, 1513, 376799279 : 376808800 (9521)
	//1, 4, 13, 36, 96, 247, 618, 1514, 379309906 : 379671027 (361121)
	//1, 4, 13, 36, 96, 247, 618, 1515, 381478030 : 382477905 (999875)
	//1, 4, 13, 36, 96, 247, 618, 1516, 377243907 : 377655228 (411321)
	//1, 4, 13, 36, 96, 247, 618, 1517, 380447898 : 380998544 (550646)
	//1, 4, 13, 36, 96, 247, 618, 1518, 380915787 : 381290191 (374404)
	//1, 4, 13, 36, 96, 247, 618, 1519, 376748505 : 377805298 (1056793)
	//1, 4, 13, 36, 96, 247, 618, 1520, 378029591 : 378420089 (390498)
	//1, 4, 13, 36, 96, 247, 618, 1521, 377205856:377338116 (132260)
	//1, 4, 13, 36, 96, 247, 618, 1522, 374423093 : 374712154 (289061)
	//1, 4, 13, 36, 96, 247, 618, 1523, 376329890 : 377656159 (1326269)
	//1, 4, 13, 36, 96, 247, 618, 1524, 376908380 : 380885701 (3977321)
	//1, 4, 13, 36, 96, 247, 618, 1525, 381227808 : 383005029 (1777221)
	//1, 4, 13, 36, 96, 247, 618, 1526, 376568293:377180693 (612400)
    //1, 4, 13, 36, 96, 247, 618, 1527, 378631480:379287398 (655918)
	//1, 4, 13, 36, 96, 247, 618, 1528, 377760583:377915727 (155144)
	//1, 4, 13, 36, 96, 247, 618, 1529, 378576369 : 378899570 (323201)
	//1, 4, 13, 36, 96, 247, 618, 1530, 381278021 : 381575637 (297616)
	//1, 4, 13, 36, 96, 247, 618, 1531, 374917331 : 376263303 (1345972)
	//1, 4, 13, 36, 96, 247, 618, 1532, 377184258 : 377398819 (214561)
	//1, 4, 13, 36, 96, 247, 618, 1533, 378424965 : 378428898 (3933)
	//1, 4, 13, 36, 96, 247, 618, 1534, 376437535 : 376855170 (417635)
	//1, 4, 13, 36, 96, 247, 618, 1535, 374246334 : 374896638 (650304)
	//1, 4, 13, 36, 96, 247, 618, 1536, 378454184 : 378968644 (514460)
	//1, 4, 13, 36, 96, 247, 618, 1537, 376359988 : 377678098 (1318110)
	//1, 4, 13, 36, 96, 247, 618, 1538, 374435032 : 378844084 (4409052)
	//1, 4, 13, 36, 96, 247, 618, 1539, 376674255 : 378711551 (2037296)
	//1, 4, 13, 36, 96, 247, 618, 1540, 377616432 : 377869725 (253293)
	//1, 4, 13, 36, 96, 247, 618, 1541, 381051220 : 381186018 (134798)
	//1, 4, 13, 36, 96, 247, 618, 1542, 376664283 : 376862412 (198129)
	//1, 4, 13, 36, 96, 247, 618, 1543, 376974970 : 378151390 (1176420)
	//1, 4, 13, 36, 96, 247, 618, 1544, 377348588 : 377668421 (319833)
	//1, 4, 13, 36, 96, 247, 618, 1545, 377192047 : 379807782 (2615735)
	//1, 4, 13, 36, 96, 247, 618, 1546, 378616467 : 378875428 (258961)
	//1, 4, 13, 36, 96, 247, 618, 1547, 374402523 : 375135357 (732834)
	//1, 4, 13, 36, 96, 247, 618, 1548, 378500208 : 378979777 (479569)
	//1, 4, 13, 36, 96, 247, 618, 1549, 381028667 : 381021992 (-6675)
	//1, 4, 13, 36, 96, 247, 618, 1550, 379177100 : 379721323 (544223)
	//1, 4, 13, 36, 96, 247, 618, 1551, 378099896 : 381041162 (2941266)
	//1, 4, 13, 36, 96, 247, 618, 1552, 377657608 : 380940455 (3282847)
	//1, 4, 13, 36, 96, 247, 618, 1553, 377848303 : 378628057 (779754)
	//1, 4, 13, 36, 96, 247, 618, 1554, 377084691 : 377357433 (272742)
	//1, 4, 13, 36, 96, 247, 618, 1555, 380217228 : 380953820 (736592)
	//1, 4, 13, 36, 96, 247, 618, 1556, 376972993:377284094 (311101)
	//1, 4, 13, 36, 96, 247, 618, 1557, 379993910 : 379993910 (0)
	//1, 4, 13, 36, 96, 247, 618, 1558, 376537850 : 376896995 (359145)
	//1, 4, 13, 36, 96, 247, 618, 1559, 376287856 : 377148754 (860898)
	//1, 4, 13, 36, 96, 247, 618, 1560, 374664392 : 375023733 (359341)
	//1, 4, 13, 36, 96, 247, 618, 1561, 376606583 : 376722240 (115657)
	//1, 4, 13, 36, 96, 247, 618, 1562, 376250264 : 376640052 (389788)
	//1, 4, 13, 36, 96, 247, 618, 1563, 376359988 : 376818984 (458996)
	//1, 4, 13, 36, 96, 247, 618, 1564, 376405664 : 376924077 (518413)
	//1, 4, 13, 36, 96, 247, 618, 1565, 376338570 : 379203441 (2864871)
	//1, 4, 13, 36, 96, 247, 618, 1566, 378141373 : 381079189 (2937816)
	//1, 4, 13, 36, 96, 247, 618, 1567, 377317387 : 378583297 (1265910)
	//1, 4, 13, 36, 96, 247, 618, 1568, 380008377 : 380087075 (78698)
	//1, 4, 13, 36, 96, 247, 618, 1569, 378478998 : 378359833 (-119165)
	//1, 4, 13, 36, 96, 247, 618, 1570, 378688110 : 379242636 (554526)
	//1, 4, 13, 36, 96, 247, 618, 1571, 374752452 : 375261867 (509415)
	//1, 4, 13, 36, 96, 247, 618, 1572, 380638199 : 381279129 (640930)
	//1, 4, 13, 36, 96, 247, 618, 1573, 378714941 : 378668913 (-46028)
	//1, 4, 13, 36, 96, 247, 618, 1574, 379875725 : 380260152 (384427)
	//1, 4, 13, 36, 96, 247, 618, 1575, 376270761 : 376838024 (567263)
	//1, 4, 13, 36, 96, 247, 618, 1576, 375425726 : 375408885 (-16841)
	//1, 4, 13, 36, 96, 247, 618, 1577, 378929778 : 378860692 (-69086)
	//1, 4, 13, 36, 96, 247, 618, 1578, 374392364 : 375356064 (963700)
	//1, 4, 13, 36, 96, 247, 618, 1579, 378805819 : 383533194 (4727375)
	//1, 4, 13, 36, 96, 247, 618, 1580, 377663993 : 379409858 (1745865)
	//1, 4, 13, 36, 96, 247, 618, 1581, 375963086:376052788 (89702)
	//1, 4, 13, 36, 96, 247, 618, 1582, 380875831 : 380998595 (122764)
	//1, 4, 13, 36, 96, 247, 618, 1583, 379388917:379809427 (420510)
	//1, 4, 13, 36, 96, 247, 618, 1584, 376885064 : 377427776 (542712)
	//1, 4, 13, 36, 96, 247, 618, 1585, 378195796 : 378009657 (-186139)
	//1, 4, 13, 36, 96, 247, 618, 1586, 376541802 : 377293699 (751897)
	//1, 4, 13, 36, 96, 247, 618, 1587, 379958269:380371869 (413600)
	//1, 4, 13, 36, 96, 247, 618, 1588, 374448258 : 374602426 (154168)
	//1, 4, 13, 36, 96, 247, 618, 1589, 376932308 : 376898564 (-33744)
	//1, 4, 13, 36, 96, 247, 618, 1590, 378435325 : 378619103 (183778)
	//1, 4, 13, 36, 96, 247, 618, 1591, 378997269 : 379699339 (702070)
	//1, 4, 13, 36, 96, 247, 618, 1592, 378383129 : 379875369 (1492240)
	//1, 4, 13, 36, 96, 247, 618, 1593, 378415608 : 381625133 (3209525)
	//1, 4, 13, 36, 96, 247, 618, 1594, 381253742 : 382708724 (1454982)
	//1, 4, 13, 36, 96, 247, 618, 1595, 379575605 : 380048989 (473384)
	//1, 4, 13, 36, 96, 247, 618, 1596, 381883126 : 381922561 (39435)
	//1, 4, 13, 36, 96, 247, 618, 1597, 376678584 : 376541580 (-137004)
	//1, 4, 13, 36, 96, 247, 618, 1598, 378093205 : 378684603 (591398)
	//1, 4, 13, 36, 96, 247, 618, 1599, 378151040 : 378667301 (516261)
	//1, 4, 13, 36, 96, 247, 618, 1600, 379225227 : 379684288 (459061)
	//1, 4, 13, 36, 96, 247, 618, 1601, 379461747 : 379300462 (-161285)
	//1, 4, 13, 36, 96, 247, 618, 1602, 380594749 : 380899358 (304609)
	//1, 4, 13, 36, 96, 247, 618, 1603, 376796471 : 377533315 (736844)
	//1, 4, 13, 36, 96, 247, 618, 1604, 376890371 : 376682650 (-207721)
	//1, 4, 13, 36, 96, 247, 618, 1605, 376474152 : 376573895 (99743)
	//1, 4, 13, 36, 96, 247, 618, 1606, 380743573 : 386171515 (5427942)
	//1, 4, 13, 36, 96, 247, 618, 1607, 378832333 : 388404790 (9572457)

	//long long comparisons = IntThatTracksComparisons::get_comparisons();

	//Sorted::verify((current_type*)data.data(), -1, size);
	//Print::print((current_type*)data.data(), -1, size);

	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	
	//std::cout << comparisons << std::endl;
	//float cost_per_element = ((float)comparisons) / size;
	//std::cout << cost_per_element << std::endl;

	char word;
	std::cin >> word;
	return 0;
}