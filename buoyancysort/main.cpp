#include "stdafx.h"
#include <algorithm>
#include <functional>
#include <iostream>
#include <map>
#include <math.h>
#include <random>
#include <set>
#include <utility>
#include "bubble-sort.h"
#include "buoyancysort.h"
#include "comb-sort.h"
#include "heap-tests.h"
#include "hoare-partition.h"
#include "hybrid-hierarchysort.h"
#include "in-place-hierarchysort.h"
#include "insertion-sort.h"
#include "int-that-tracks-comparisons.h"
#include "interlaced-double-binary-heap.h"
#include "interlaced-entangled-double-binary-heap.h"
#include "max-heap.h"
#include "median-of-medians.h"
#include "min-heap.h"
#include "ordered-max-heap.h"
#include "ordered-min-heap.h"
#include "out-of-place-hierarchysort.h"
#include "print.h"
#include "quicksort.h"
#include "reverse.h"
#include "semi-stable-partition.h"
#include "shell-sort.h"
#include "sift.h"
#include "sorted.h"
#include "spindle.h"
#include "stable-partition.h"

//typedef int current_type;
typedef IntThatTracksComparisons::IntThatTracksComparisons current_type;

int main()
{
	//HeapTests::heap_tests();
	const long size = 1000000;
	const long tuple_size = 2;
	std::vector<current_type> data(size);
	for (std::size_t i = 0; i < size; i += 1)
	{
		/*if ((i % 2) == 0)
		{
			data[i] = size/2;
			continue;
		}*/
		data[i] = size - i;
	}
	
	std::random_device random_device;
	std::mt19937 random_number_generator(random_device());
	random_number_generator.seed(26);
	std::shuffle(&data[0], (&data[size-1]) + 1, random_number_generator);
	
	//Print::print((current_type*)data.data(), -1, size);
	
	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);

	//IntThatTracksComparisons::reset_comparisons();

	//Hierarchysort::in_place<current_type>((current_type*)data.data(), -1, size);
	std::vector<long> gap_sequence1 = ShellSort::extrapolated_ciura_tokuda1_old;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::generalized_ciura4, 25);
	std::vector<long> gap_sequence2 = ShellSort::extrapolated_ciura_tokuda1;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::extrapolated_ciura, 20);
	//std::vector<long> gap_sequence2 = ShellSort::extrapolated_ciura_tokuda3;
	//ShellSort::empirical_comparison_range(gap_sequence1, gap_sequence2, 45000, 120000, 40991, 41200, 41);
	ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 42000, 100000, 500);
	//ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 42000, 100000, 41326, 41326+1, 41326+50, 41);

	// I don't know if this is relevant to anything, but I was curious about the difference between
	// http://oeis.org/A226845 and http://oeis.org/A221313
	// So I calculated it:
	// { 4, 9, 23, 57, 142, 353, 878, 2183, 5428, 13496, 33556, 83432, 207441, 515770, 1282382, 3188443 } - { 3, 9, 23, 57, 145, 373, 957, 2449, 6267, 16045, 41083, 105185, 269297, 689465, 1765209, 4519393 }
	// { 1, 0, 0, 0, -3, -20, -79, -266, -839, -2549, -7527, -21753, -61856, -173695, -482827, -1330950 }

	//1, 4, 10, 23, 57, 145, 362, 925, 2383, 6150, 15905, 41326, 37766933:37776702 (9769) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 370, 900, 361, 361 + 1, 361 + 50, 5000);
	//1, 4, 10, 23, 57, 145, 363, 925, 2383, 6150, 15905, 41326, 37698614 : 37675640 (-22974)
	//1, 4, 10, 23, 57, 145, 364, 925, 2383, 6150, 15905, 41326, 37795554 : 37730503 (-65051)
	//1, 4, 10, 23, 57, 145, 365, 925, 2383, 6150, 15905, 41326, 37680364 : 37633616 (-46748)
	//1, 4, 10, 23, 57, 145, 366, 925, 2383, 6150, 15905, 41326, 37698699 : 37710799 (12100)
	//1, 4, 10, 23, 57, 145, 367, 925, 2383, 6150, 15905, 41326, 37690699 : 37690441 (-258)
	//1, 4, 10, 23, 57, 145, 368, 925, 2383, 6150, 15905, 41326, 37728096 : 37667877 (-60219)
	//1, 4, 10, 23, 57, 145, 369, 925, 2383, 6150, 15905, 41326, 37724452 : 37714326 (-10126)
	//1, 4, 10, 23, 57, 145, 370, 925, 2383, 6150, 15905, 41326, 37799186 : 37841596 (42410)
	//1, 4, 10, 23, 57, 145, 371, 925, 2383, 6150, 15905, 41326, 37709425 : 37655017 (-54408)
	//1, 4, 10, 23, 57, 145, 372, 925, 2383, 6150, 15905, 41326, 37727279 : 37676054 (-51225)
	//1, 4, 10, 23, 57, 145, 373, 925, 2383, 6150, 15905, 41326, 37691873 : 37776236 (84363)
	//1, 4, 10, 23, 57, 145, 374, 925, 2383, 6150, 15905, 41326, 37699745 : 37676697 (-23048)
	//1, 4, 10, 23, 57, 145, 375, 925, 2383, 6150, 15905, 41326, 37752333 : 37693459 (-58874)
	//1, 4, 10, 23, 57, 145, 376, 925, 2383, 6150, 15905, 41326, 37700492 : 37641359 (-59133)
	//1, 4, 10, 23, 57, 145, 377, 925, 2383, 6150, 15905, 41326, 37706902 : 37669927 (-36975)
	//1, 4, 10, 23, 57, 145, 378, 925, 2383, 6150, 15905, 41326, 37697649 : 37939087 (241438)
	//1, 4, 10, 23, 57, 145, 379, 925, 2383, 6150, 15905, 41326, 37687408 : 37629560 (-57848)
	
	//1, 4, 10, 23, 57, 145, 364, 926, 2383, 6150, 15905, 41326, 120555746:120466962 (-88784) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 970, 2400, 925, 925 + 1, 925 + 50, 5000);
	//1, 4, 10, 23, 57, 145, 364, 927, 2383, 6150, 15905, 41326, 120976712:121124212 (147500)
	//1, 4, 10, 23, 57, 145, 364, 928, 2383, 6150, 15905, 41326, 120978209 : 120894207 (-84002)
	//1, 4, 10, 23, 57, 145, 364, 929, 2383, 6150, 15905, 41326, 121137810 : 121036486 (-101324)
	//1, 4, 10, 23, 57, 145, 364, 930, 2383, 6150, 15905, 41326, 120877694 : 121326058 (448364)
	//1, 4, 10, 23, 57, 145, 364, 931, 2383, 6150, 15905, 41326, 120971157 : 120824468 (-146689)
	//1, 4, 10, 23, 57, 145, 364, 932, 2383, 6150, 15905, 41326, 120666948 : 120685947 (18999)
	//1, 4, 10, 23, 57, 145, 364, 933, 2383, 6150, 15905, 41326, 120613260 : 120763720 (150460)
	//1, 4, 10, 23, 57, 145, 364, 934, 2383, 6150, 15905, 41326, 120605716 : 120499464 (-106252)
	//1, 4, 10, 23, 57, 145, 364, 935, 2383, 6150, 15905, 41326, 121040845 : 121182745 (141900)
	//1, 4, 10, 23, 57, 145, 364, 936, 2383, 6150, 15905, 41326, 120905787 : 120939056 (33269)
	//1, 4, 10, 23, 57, 145, 364, 937, 2383, 6150, 15905, 41326, 121108100 : 120968404 (-139696)
	//1, 4, 10, 23, 57, 145, 364, 938, 2383, 6150, 15905, 41326, 120624073 : 120762619 (138546)
	//1, 4, 10, 23, 57, 145, 364, 939, 2383, 6150, 15905, 41326, 120987387 : 121070340 (82953)
	//1, 4, 10, 23, 57, 145, 364, 940, 2383, 6150, 15905, 41326, 120642050 : 120523882 (-118168)
	//1, 4, 10, 23, 57, 145, 364, 941, 2383, 6150, 15905, 41326, 120986534 : 121047112 (60578)
	//1, 4, 10, 23, 57, 145, 364, 942, 2383, 6150, 15905, 41326, 121097409 : 121116186 (18777)
	//1, 4, 10, 23, 57, 145, 364, 943, 2383, 6150, 15905, 41326, 120777690 : 120690575 (-87115)
	//1, 4, 10, 23, 57, 145, 364, 944, 2383, 6150, 15905, 41326, 120884918 : 121454564 (569646)
	//1, 4, 10, 23, 57, 145, 364, 945, 2383, 6150, 15905, 41326, 120976712 : 120899515 (-77197)
	//1, 4, 10, 23, 57, 145, 364, 946, 2383, 6150, 15905, 41326, 121145587 : 121061973 (-83614)
	//1, 4, 10, 23, 57, 145, 364, 947, 2383, 6150, 15905, 41326, 121039589 : 122075223 (1035634)
	//1, 4, 10, 23, 57, 145, 364, 948, 2383, 6150, 15905, 41326, 121034276 : 120905527 (-128749) // hypothesis was okay (I thought this would be the best value)
	//1, 4, 10, 23, 57, 145, 364, 949, 2383, 6150, 15905, 41326, 120977225 : 120963871 (-13354)
	//1, 4, 10, 23, 57, 145, 364, 950, 2383, 6150, 15905, 41326, 120995321 : 121110768 (115447)
	//1, 4, 10, 23, 57, 145, 364, 951, 2383, 6150, 15905, 41326, 121085543 : 120961794 (-123749)
	//1, 4, 10, 23, 57, 145, 364, 952, 2383, 6150, 15905, 41326, 120651345 : 120731892 (80547)
	//1, 4, 10, 23, 57, 145, 364, 953, 2383, 6150, 15905, 41326, 121261405:121327981 (66576)
	//1, 4, 10, 23, 57, 145, 364, 954, 2383, 6150, 15905, 41326, 121284550:121196269 (-88281)
	//1, 4, 10, 23, 57, 145, 364, 955, 2383, 6150, 15905, 41326, 121054071 : 121056326 (2255)

	//1, 4, 10, 23, 57, 145, 364, 931, 2384, 6150, 15905, 41326, 35678616:35694826 (16210)
	//1, 4, 10, 23, 57, 145, 364, 931, 2385, 6150, 15905, 41326, 36057268 : 36091879 (34611)
	//1, 4, 10, 23, 57, 145, 364, 931, 2386, 6150, 15905, 41326, 36115486 : 36133643 (18157)
	//1, 4, 10, 23, 57, 145, 364, 931, 2387, 6150, 15905, 41326, 36175278 : 36330128 (154850)
	//1, 4, 10, 23, 57, 145, 364, 931, 2388, 6150, 15905, 41326, 36421734 : 36472500 (50766)
	//1, 4, 10, 23, 57, 145, 364, 931, 2389, 6150, 15905, 41326, 36000147 : 36039873 (39726)
	//1, 4, 10, 23, 57, 145, 364, 931, 2390, 6150, 15905, 41326, 36467467 : 36457125 (-10342)
	//1, 4, 10, 23, 57, 145, 364, 931, 2391, 6150, 15905, 41326, 36062657 : 36052493 (-10164)
	//1, 4, 10, 23, 57, 145, 364, 931, 2392, 6150, 15905, 41326, 36184632 : 36152999 (-31633)
	//1, 4, 10, 23, 57, 145, 364, 931, 2393, 6150, 15905, 41326, 35183797 : 35177317 (-6480)
	//1, 4, 10, 23, 57, 145, 364, 931, 2394, 6150, 15905, 41326, 35651632 : 35626654 (-24978)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6150, 15905, 41326, 36107094 : 36059041 (-48053)
	//1, 4, 10, 23, 57, 145, 364, 931, 2396, 6150, 15905, 41326, 36039952 : 36016811 (-23141)
	//1, 4, 10, 23, 57, 145, 364, 931, 2397, 6150, 15905, 41326, 35121296 : 35151210 (29914)
	//1, 4, 10, 23, 57, 145, 364, 931, 2398, 6150, 15905, 41326, 36179398 : 36185217 (5819)
	//1, 4, 10, 23, 57, 145, 364, 931, 2399, 6150, 15905, 41326, 36366636 : 36360231 (-6405)
	//1, 4, 10, 23, 57, 145, 364, 931, 2400, 6150, 15905, 41326, 36349468 : 36369890 (20422)
	//1, 4, 10, 23, 57, 145, 364, 931, 2401, 6150, 15905, 41326, 36291464 : 36325438 (33974)
	//1, 4, 10, 23, 57, 145, 364, 931, 2402, 6150, 15905, 41326, 35879991 : 35900876 (20885)
	//1, 4, 10, 23, 57, 145, 364, 931, 2403, 6150, 15905, 41326, 35923349 : 35974514 (51165)
	//1, 4, 10, 23, 57, 145, 364, 931, 2404, 6150, 15905, 41326, 35927287 : 35935229 (7942)
	//1, 4, 10, 23, 57, 145, 364, 931, 2405, 6150, 15905, 41326, 36022368 : 36008868 (-13500)
	//1, 4, 10, 23, 57, 145, 364, 931, 2406, 6150, 15905, 41326, 36752233 : 36729278 (-22955)
	//1, 4, 10, 23, 57, 145, 364, 931, 2407, 6150, 15905, 41326, 35886319 : 35878093 (-8226)
	//1, 4, 10, 23, 57, 145, 364, 931, 2408, 6150, 15905, 41326, 36039508 : 36036168 (-3340)
	//1, 4, 10, 23, 57, 145, 364, 931, 2409, 6150, 15905, 41326, 36513122 : 36496188 (-16934)
	//1, 4, 10, 23, 57, 145, 364, 931, 2410, 6150, 15905, 41326, 35972079 : 35942956 (-29123)
	//1, 4, 10, 23, 57, 145, 364, 931, 2411, 6150, 15905, 41326, 36074322 : 36097003 (22681)
	//1, 4, 10, 23, 57, 145, 364, 931, 2412, 6150, 15905, 41326, 36179319 : 36174851 (-4468)
	//1, 4, 10, 23, 57, 145, 364, 931, 2413, 6150, 15905, 41326, 35882622 : 35895125 (12503)
	//1, 4, 10, 23, 57, 145, 364, 931, 2414, 6150, 15905, 41326, 36108678 : 36135005 (26327)
	//1, 4, 10, 23, 57, 145, 364, 931, 2415, 6150, 15905, 41326, 36418455 : 36455645 (37190)
	//1, 4, 10, 23, 57, 145, 364, 931, 2416, 6150, 15905, 41326, 36429705 : 36492452 (62747)
	//1, 4, 10, 23, 57, 145, 364, 931, 2417, 6150, 15905, 41326, 35791932 : 35803864 (11932)
	//1, 4, 10, 23, 57, 145, 364, 931, 2418, 6150, 15905, 41326, 35571556 : 35557315 (-14241)
	//1, 4, 10, 23, 57, 145, 364, 931, 2419, 6150, 15905, 41326, 37051164 : 37069095 (17931)
	//1, 4, 10, 23, 57, 145, 364, 931, 2420, 6150, 15905, 41326, 36466611 : 36461607 (-5004)
	//1, 4, 10, 23, 57, 145, 364, 931, 2421, 6150, 15905, 41326, 36025294 : 35997929 (-27365)
	//1, 4, 10, 23, 57, 145, 364, 931, 2422, 6150, 15905, 41326, 36001641 : 36011445 (9804)
	//1, 4, 10, 23, 57, 145, 364, 931, 2423, 6150, 15905, 41326, 36506336 : 36523902 (17566)
	//1, 4, 10, 23, 57, 145, 364, 931, 2424, 6150, 15905, 41326, 35776470 : 35772319 (-4151)
	//1, 4, 10, 23, 57, 145, 364, 931, 2425, 6150, 15905, 41326, 35860493 : 35874382 (13889)
	//1, 4, 10, 23, 57, 145, 364, 931, 2426, 6150, 15905, 41326, 35897165 : 35891212 (-5953)
	//1, 4, 10, 23, 57, 145, 364, 931, 2427, 6150, 15905, 41326, 35272566 : 35280546 (7980)
	//1, 4, 10, 23, 57, 145, 364, 931, 2428, 6150, 15905, 41326, 35399811 : 35427741 (27930)
	//1, 4, 10, 23, 57, 145, 364, 931, 2429, 6150, 15905, 41326, 35823898 : 36105958 (282060)
	//1, 4, 10, 23, 57, 145, 364, 931, 2430, 6150, 15905, 41326, 36016093 : 36032728 (16635)
	//1, 4, 10, 23, 57, 145, 364, 931, 2431, 6150, 15905, 41326, 35570439 : 35588622 (18183)

	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6151, 15905, 41326, 48503177:48565709 (62532) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 6200, 14000, 6150, 6150 + 1, 6150 + 50, 250);
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6152, 15905, 41326, 48322281 : 48334878 (12597)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6153, 15905, 41326, 48994455 : 49050201 (55746)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6154, 15905, 41326, 48003750 : 47997149 (-6601)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6155, 15905, 41326, 48895915 : 48898471 (2556)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6156, 15905, 41326, 47960038 : 48018476 (58438)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6157, 15905, 41326, 47395285 : 47419039 (23754)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6158, 15905, 41326, 48164465 : 48214719 (50254)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6159, 15905, 41326, 48687083 : 48749562 (62479)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6160, 15905, 41326, 49398580 : 49429666 (31086)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6161, 15905, 41326, 49109191 : 49164898 (55707)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6162, 15905, 41326, 48502092 : 48513561 (11469)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6163, 15905, 41326, 49616894 : 49618457 (1563)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6164, 15905, 41326, 49311390 : 49324231 (12841)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15905, 41326, 49606276 : 49576340 (-29936)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6166, 15905, 41326, 47778602 : 47807452 (28850)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6167, 15905, 41326, 49017904 : 49053254 (35350)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6168, 15905, 41326, 48596741 : 48578557 (-18184)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6169, 15905, 41326, 48115752 : 48163840 (48088)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6170, 15905, 41326, 48990214 : 49004195 (13981)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6171, 15905, 41326, 49183285 : 49170468 (-12817)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6172, 15905, 41326, 49327058 : 49393330 (66272)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6173, 15905, 41326, 49514134 : 49541406 (27272)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6174, 15905, 41326, 47463559 : 47501968 (38409)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6175, 15905, 41326, 50578052 : 50637570 (59518)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6176, 15905, 41326, 50007882 : 50033683 (25801)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6177, 15905, 41326, 48606896 : 48650655 (43759)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6178, 15905, 41326, 48206118 : 48207347 (1229)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6179, 15905, 41326, 49992040 : 49976304 (-15736)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6180, 15905, 41326, 49238265 : 49285816 (47551)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6181, 15905, 41326, 48121242 : 48163691 (42449)

	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15906, 41326, 23080437:23058746 (-21691) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 16000, 36000, 15905, 15905 + 1, 15905 + 50, 41);
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15907, 41326, 23291884 : 23268342 (-23542)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15908, 41326, 23311822 : 23272796 (-39026)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15909, 41326, 23449017 : 23437865 (-11152)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15910, 41326, 23148335 : 23129282 (-19053)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15911, 41326, 25240190 : 25207288 (-32902)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15912, 41326, 24683971 : 24665193 (-18778)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15913, 41326, 23292476 : 23268563 (-23913)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15914, 41326, 23118967 : 23130386 (11419)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15915, 41326, 24274867 : 24277503 (2636)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41326, 25290489 : 25228201 (-62288)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15917, 41326, 23909243 : 23908264 (-979)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15918, 41326, 21403849 : 21386037 (-17812)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15919, 41326, 23797282 : 23796301 (-981)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15920, 41326, 23313864 : 23302640 (-11224)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15921, 41326, 23879279 : 23854987 (-24292)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15922, 41326, 23752445 : 23735671 (-16774)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15923, 41326, 24616787 : 24591826 (-24961)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15924, 41326, 23020400 : 23039512 (19112)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15925, 41326, 24065076 : 24036712 (-28364)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15926, 41326, 24556769 : 24517684 (-39085)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15927, 41326, 23314903 : 23293434 (-21469)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15928, 41326, 22372946 : 22375690 (2744)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15929, 41326, 23621735 : 23602534 (-19201)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15930, 41326, 22648698 : 22668986 (20288)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15931, 41326, 21996369 : 22024300 (27931)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15932, 41326, 23728085 : 23693594 (-34491)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15933, 41326, 24599517 : 24562693 (-36824)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15934, 41326, 22480145 : 22464516 (-15629)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15935, 41326, 22967123 : 22962829 (-4294)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15936, 41326, 22548608 : 22513895 (-34713)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15937, 41326, 22497574:22452169 (-45405)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15938, 41326, 24084729 : 24068525 (-16204)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15939, 41326, 21367541 : 21355215 (-12326)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15940, 41326, 23342230 : 23334421 (-7809)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15941, 41326, 24917061 : 24889520 (-27541)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15942, 41326, 21864151 : 21852856 (-11295)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15943, 41326, 23000481 : 22985471 (-15010)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15944, 41326, 22964772 : 22945566 (-19206)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15945, 41326, 23844718 : 23831468 (-13250)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15946, 41326, 23881461 : 23880708 (-753)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15947, 41326, 24754034:24730815 (-23219)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15948, 41326, 22554260 : 22600042 (45782)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15949, 41326, 24431468 : 24405315 (-26153)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15950, 41326, 23577763 : 23536329 (-41434)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15951, 41326, 22701323 : 22690606 (-10717)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15952, 41326, 23589506 : 23585671 (-3835)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15953, 41326, 23753099 : 23736012 (-17087)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15954, 41326, 21314157 : 21323737 (9580)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15955, 41326, 23601072 : 23577171 (-23901)

	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41327, 73175580:73249272 (73692) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 42000, 100000, 41326, 41326 + 1, 41326 + 50, 41);
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41328, 71228018 : 71216872 (-11146)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41329, 75071343 : 75055047 (-16296)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41330, 70230509 : 70162395 (-68114)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41331, 69943584 : 69932286 (-11298)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41332, 73907648 : 73835415 (-72233)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41333, 68899744 : 68940321 (40577)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41334, 72928092 : 72990387 (62295)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41335, 67228039 : 67246870 (18831)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41336, 75996831 : 76036254 (39423)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41337, 71662787 : 71616625 (-46162)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41338, 74469643 : 74470168 (525)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41339, 71467096 : 71460472 (-6624)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41340, 72460564 : 72445933 (-14631)
	//1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41341, 71072197 : 71058918 (-13279)

	// Testing against old best:
    // 1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41332, 867972659:867887333 (-85326) // ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 42000, 100000, 500);
    // It's cool that I found a new best (and really quickly, no retesting points (because 41 samples can often give you really bad points)); this is a very rough sequence and definitely can be improved.

	//long long comparisons = IntThatTracksComparisons::get_comparisons();

	//Sorted::verify((current_type*)data.data(), -1, size);
	//Print::print((current_type*)data.data(), -1, size);

	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	
	//std::cout << comparisons << std::endl;
	//float cost_per_element = ((float)comparisons) / size;
	//std::cout << cost_per_element << std::endl;

	char word;
	std::cin >> word;
	return 0;
}