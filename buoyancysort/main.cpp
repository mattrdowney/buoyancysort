#include "stdafx.h"
#include <algorithm>
#include <functional>
#include <iostream>
#include <map>
#include <math.h>
#include <random>
#include <set>
#include <utility>
#include "bubble-sort.h"
#include "buoyancysort.h"
#include "comb-sort.h"
#include "heap-tests.h"
#include "hoare-partition.h"
#include "hybrid-hierarchysort.h"
#include "in-place-hierarchysort.h"
#include "insertion-sort.h"
#include "int-that-tracks-comparisons.h"
#include "interlaced-double-binary-heap.h"
#include "interlaced-entangled-double-binary-heap.h"
#include "max-heap.h"
#include "median-of-medians.h"
#include "min-heap.h"
#include "ordered-max-heap.h"
#include "ordered-min-heap.h"
#include "out-of-place-hierarchysort.h"
#include "print.h"
#include "quicksort.h"
#include "reverse.h"
#include "semi-stable-partition.h"
#include "shell-sort.h"
#include "sift.h"
#include "sorted.h"
#include "spindle.h"
#include "stable-partition.h"

//typedef int current_type;
typedef IntThatTracksComparisons::IntThatTracksComparisons current_type;

int main()
{
	//HeapTests::heap_tests();
	const long size = 1000000;
	const long tuple_size = 2;
	std::vector<current_type> data(size);
	for (std::size_t i = 0; i < size; i += 1)
	{
		/*if ((i % 2) == 0)
		{
			data[i] = size/2;
			continue;
		}*/
		data[i] = size - i;
	}
	
	std::random_device random_device;
	std::mt19937 random_number_generator(random_device());
	random_number_generator.seed(26);
	std::shuffle(&data[0], (&data[size-1]) + 1, random_number_generator);
	
	//Print::print((current_type*)data.data(), -1, size);
	
	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);

	//IntThatTracksComparisons::reset_comparisons();

	//Hierarchysort::in_place<current_type>((current_type*)data.data(), -1, size);
	std::vector<long> gap_sequence1 = ShellSort::extrapolated_ciura_tokuda1;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::generalized_ciura4, 25);
	std::vector<long> gap_sequence2 = ShellSort::best_known_shellsort_gap_sequence;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::extrapolated_ciura, 20);
	//std::vector<long> gap_sequence2 = ShellSort::extrapolated_ciura_tokuda3;
	//ShellSort::empirical_comparison_range(gap_sequence1, gap_sequence2, 45000, 120000, 40991, 41200, 41);
	ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 2, 100, 10000);
	//ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 1770, 4515, 1757, 1745, 1745, 20000);

	//1, 4, 13, 36, 96, 258, 677, 54530411:54529981 (-430) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 710, 1900, 697, 697-20, 697+20, 3000);
	//1, 4, 13, 36, 96, 258, 678, 54432170 : 55273892 (841722)
	//1, 4, 13, 36, 96, 258, 679, 54291984 : 54311204 (19220)
	//1, 4, 13, 36, 96, 258, 680, 54479714 : 54475522 (-4192)
	//1, 4, 13, 36, 96, 258, 681, 54510861 : 54532337 (21476)
	//1, 4, 13, 36, 96, 258, 682, 54374050 : 54387141 (13091)
	//1, 4, 13, 36, 96, 258, 683, 54537414 : 54555475 (18061)
	//1, 4, 13, 36, 96, 258, 684, 54349209 : 54766169 (416960)
	//1, 4, 13, 36, 96, 258, 685, 54340496 : 54366158 (25662)
	//1, 4, 13, 36, 96, 258, 686, 54379362 : 54378097 (-1265)
	//1, 4, 13, 36, 96, 258, 687, 54490206 : 54542083 (51877)
	//1, 4, 13, 36, 96, 258, 688, 54307330 : 54368527 (61197)
	//1, 4, 13, 36, 96, 258, 689, 54509122 : 54531417 (22295)
	//1, 4, 13, 36, 96, 258, 690, 54370437 : 54756371 (385934)
	//1, 4, 13, 36, 96, 258, 691, 54521717 : 54534978 (13261)
	//1, 4, 13, 36, 96, 258, 692, 54524477 : 54550580 (26103)
	//1, 4, 13, 36, 96, 258, 693, 54252255 : 54276317 (24062)
	//1, 4, 13, 36, 96, 258, 694, 54251274 : 54272945 (21671)
	//1, 4, 13, 36, 96, 258, 695, 54490658 : 54512206 (21548)
	//1, 4, 13, 36, 96, 258, 696, 54486360 : 54898650 (412290)
	//1, 4, 13, 36, 96, 258, 697, 54571105 : 54571105 (0)
	//1, 4, 13, 36, 96, 258, 698, 54134011 : 54146815 (12804)
	//1, 4, 13, 36, 96, 258, 699, 54497183 : 54538169 (40986)
	//1, 4, 13, 36, 96, 258, 700, 54228465 : 54235551 (7086)
	//1, 4, 13, 36, 96, 258, 701, 54530125 : 54563614 (33489)
	//1, 4, 13, 36, 96, 258, 702, 54235194 : 54687398 (452204)
	//1, 4, 13, 36, 96, 258, 703, 54433796 : 54443073 (9277)
	//1, 4, 13, 36, 96, 258, 704, 54408693 : 54437218 (28525)
	//1, 4, 13, 36, 96, 258, 705, 54300158 : 54336090 (35932)
	//1, 4, 13, 36, 96, 258, 706, 54503541 : 54530110 (26569)
	//1, 4, 13, 36, 96, 258, 707, 54557041 : 54600165 (43124)
	//1, 4, 13, 36, 96, 258, 708, 54291481 : 55026288 (734807)
	//1, 4, 13, 36, 96, 258, 709, 54465580 : 54513620 (48040)
	//1, 4, 13, 36, 96, 258, 710, 54458489 : 54510463 (51974)
	//1, 4, 13, 36, 96, 258, 711, 54472142 : 54526936 (54794)
	//1, 4, 13, 36, 96, 258, 712, 54331933 : 54385279 (53346)
	//1, 4, 13, 36, 96, 258, 713, 54223925 : 54280848 (56923)
	//1, 4, 13, 36, 96, 258, 714, 54442657 : 54892880 (450223)
	//1, 4, 13, 36, 96, 258, 715, 54354321 : 54386031 (31710)
	//1, 4, 13, 36, 96, 258, 716, 54367004 : 54392807 (25803)
	//1, 4, 13, 36, 96, 258, 717, 54242079 : 54298881 (56802)

	//1, 4, 13, 36, 96, 258, 670, 90958431:90962981 (4550) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 710, 1900, 697, 670, 686, 5000);
	//1, 4, 13, 36, 96, 258, 671, 90952266 : 90972608 (20342)
	//1, 4, 13, 36, 96, 258, 672, 91017268 : 91871149 (853881)
	//1, 4, 13, 36, 96, 258, 673, 90833399 : 90795589 (-37810)
	//1, 4, 13, 36, 96, 258, 674, 90753744 : 90743623 (-10121)
	//1, 4, 13, 36, 96, 258, 675, 90924765 : 90981228 (56463)
	//1, 4, 13, 36, 96, 258, 676, 90830086 : 90854586 (24500)
	//1, 4, 13, 36, 96, 258, 677, 91301558 : 91353669 (52111)
	//1, 4, 13, 36, 96, 258, 678, 90966836 : 92355679 (1388843)
	//1, 4, 13, 36, 96, 258, 679, 90900916 : 90884528 (-16388)
	//1, 4, 13, 36, 96, 258, 680, 90934058 : 90937498 (3440)
	//1, 4, 13, 36, 96, 258, 681, 90768020 : 90795917 (27897)
	//1, 4, 13, 36, 96, 258, 682, 90899577 : 90915950 (16373)
	//1, 4, 13, 36, 96, 258, 683, 90922606 : 90927768 (5162)
	//1, 4, 13, 36, 96, 258, 684, 90699533 : 91384249 (684716)
	//1, 4, 13, 36, 96, 258, 685, 91290217 : 91311761 (21544)
	//1, 4, 13, 36, 96, 258, 686, 90801429 : 90779133 (-22296)

	//1, 4, 13, 36, 96, 258, 660, 181679790:183052163 (1372373) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 710, 1900, 697, 660, 673, 10000);
	//1, 4, 13, 36, 96, 258, 661, 182067136 : 182067852 (716)
	//1, 4, 13, 36, 96, 258, 662, 182106415 : 182081282 (-25133)
	//1, 4, 13, 36, 96, 258, 663, 181704335 : 181689144 (-15191)
	//1, 4, 13, 36, 96, 258, 664, 181620289 : 181611197 (-9092)
	//1, 4, 13, 36, 96, 258, 665, 181656396 : 181677834 (21438)
	//1, 4, 13, 36, 96, 258, 666, 181703973 : 183128236 (1424263)
	//1, 4, 13, 36, 96, 258, 667, 182090699 : 182047454 (-43245)
	//1, 4, 13, 36, 96, 258, 668, 181665677 : 181630292 (-35385)
	//1, 4, 13, 36, 96, 258, 669, 182055716 : 182076996 (21280)
	//1, 4, 13, 36, 96, 258, 670, 181465361 : 181418332 (-47029)
	//1, 4, 13, 36, 96, 258, 671, 181315923 : 181328295 (12372)
	//1, 4, 13, 36, 96, 258, 672, 182036337 : 183798031 (1761694)
	//1, 4, 13, 36, 96, 258, 673, 181705038 : 181634780 (-70258)

	//1, 4, 13, 36, 96, 258, 673, 1735, 51406364:51454743 (48379) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 1770, 4515, 1755, 1755-20, 1755+20, 1000);
	//1, 4, 13, 36, 96, 258, 673, 1736, 51788944 : 51880599 (91655)
	//1, 4, 13, 36, 96, 258, 673, 1737, 50706355 : 50707634 (1279)
	//1, 4, 13, 36, 96, 258, 673, 1738, 51246856 : 51110659 (-136197)
	//1, 4, 13, 36, 96, 258, 673, 1739, 52053280 : 51820368 (-232912)
	//1, 4, 13, 36, 96, 258, 673, 1740, 51825949 : 51679349 (-146600)
	//1, 4, 13, 36, 96, 258, 673, 1741, 51757177 : 51720714 (-36463)
	//1, 4, 13, 36, 96, 258, 673, 1742, 51870073 : 51886100 (16027)
	//1, 4, 13, 36, 96, 258, 673, 1743, 51318684 : 51291886 (-26798)
	//1, 4, 13, 36, 96, 258, 673, 1744, 51609694 : 51416747 (-192947)
	//1, 4, 13, 36, 96, 258, 673, 1745, 51981095 : 51764054 (-217041)
	//1, 4, 13, 36, 96, 258, 673, 1746, 51242556 : 51072687 (-169869)
	//1, 4, 13, 36, 96, 258, 673, 1747, 51827212 : 51736343 (-90869)
	//1, 4, 13, 36, 96, 258, 673, 1748, 51729465 : 51760867 (31402)
	//1, 4, 13, 36, 96, 258, 673, 1749, 51957936 : 51905501 (-52435)
	//1, 4, 13, 36, 96, 258, 673, 1750, 51907434 : 51717313 (-190121)
	//1, 4, 13, 36, 96, 258, 673, 1751, 51908762 : 51709086 (-199676)
	//1, 4, 13, 36, 96, 258, 673, 1752, 50853322 : 50665102 (-188220)
	//1, 4, 13, 36, 96, 258, 673, 1753, 50746364 : 50711166 (-35198)
	//1, 4, 13, 36, 96, 258, 673, 1754, 52023926 : 52006589 (-17337)
	//1, 4, 13, 36, 96, 258, 673, 1755, 51207321 : 51207321 (0)
	//1, 4, 13, 36, 96, 258, 673, 1756, 51985073 : 51892197 (-92876)
	//1, 4, 13, 36, 96, 258, 673, 1757, 51987613 : 51747917 (-239696)
	//1, 4, 13, 36, 96, 258, 673, 1758, 52146768 : 52018019 (-128749)
	//1, 4, 13, 36, 96, 258, 673, 1759, 50784858 : 50725564 (-59294)
	//1, 4, 13, 36, 96, 258, 673, 1760, 51121145 : 51180811 (59666)
	//1, 4, 13, 36, 96, 258, 673, 1761, 51679300 : 52061200 (381900)
	//1, 4, 13, 36, 96, 258, 673, 1762, 51925141 : 51795468 (-129673)
	//1, 4, 13, 36, 96, 258, 673, 1763, 52028498 : 51855499 (-172999)
	//1, 4, 13, 36, 96, 258, 673, 1764, 51746271 : 51543685 (-202586)
	//1, 4, 13, 36, 96, 258, 673, 1765, 52078398 : 52061566 (-16832)
	//1, 4, 13, 36, 96, 258, 673, 1766, 51101614 : 51320741 (219127)
	//1, 4, 13, 36, 96, 258, 673, 1767, 51854739 : 51857778 (3039)
	//1, 4, 13, 36, 96, 258, 673, 1768, 51390664 : 51250484 (-140180)
	//1, 4, 13, 36, 96, 258, 673, 1769, 52230886 : 52055251 (-175635)
	//1, 4, 13, 36, 96, 258, 673, 1770, 51881377 : 51741036 (-140341)
	//1, 4, 13, 36, 96, 258, 673, 1771, 51304727 : 51383701 (78974)
	//1, 4, 13, 36, 96, 258, 673, 1772, 51609939 : 51651766 (41827)
	//1, 4, 13, 36, 96, 258, 673, 1773, 50897399 : 50853943 (-43456)
	//1, 4, 13, 36, 96, 258, 673, 1774, 51409370 : 51295591 (-113779)
	//1, 4, 13, 36, 96, 258, 673, 1775, 51179491 : 51033130 (-146361)

	//1, 4, 13, 36, 96, 258, 673, 1739, 153241308:153274835 (33527) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 1770, 4515, 1757, 1739, 1745, 3000);
	//1, 4, 13, 36, 96, 258, 673, 1740, 153714847 : 153880392 (165545)
	//1, 4, 13, 36, 96, 258, 673, 1741, 153024943 : 153473525 (448582)
	//1, 4, 13, 36, 96, 258, 673, 1742, 153160069 : 153796385 (636316)
	//1, 4, 13, 36, 96, 258, 673, 1743, 152371098 : 152811442 (440344)
	//1, 4, 13, 36, 96, 258, 673, 1744, 153176848 : 153269725 (92877)
	//1, 4, 13, 36, 96, 258, 673, 1745, 153849175 : 153834585 (-14590)

	//1, 4, 13, 36, 96, 258, 673, 1745, 1025929436:1025692978 (-236458) // ShellSort::empirical_comparison_inner_range(gap_sequence1, gap_sequence1, 1770, 4515, 1757, 1745, 1745, 20000);

	// This new form is worse, though:
    //1, 4, 13, 36, 96, 258, 673, 1745, 339935729:345006636 (5070907) // ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 2, 4370, 10000); // when comparing to my old sequence 1, 4, 10, 23, 57, 145, 364, 931, 2395, 6165, 15916, 41332
    // Although it does better for small sizes: (< ~100)
    //1, 4, 13, 36, 96, 258, 673, 1745, 3199079:3178380 (-20699) // ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 2, 100, 10000);


	//long long comparisons = IntThatTracksComparisons::get_comparisons();

	//Sorted::verify((current_type*)data.data(), -1, size);
	//Print::print((current_type*)data.data(), -1, size);

	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	
	//std::cout << comparisons << std::endl;
	//float cost_per_element = ((float)comparisons) / size;
	//std::cout << cost_per_element << std::endl;

	char word;
	std::cin >> word;
	return 0;
}