#include "stdafx.h"
#include <algorithm>
#include <functional>
#include <iostream>
#include <map>
#include <math.h>
#include <random>
#include <set>
#include <utility>
#include "bubble-sort.h"
#include "buoyancysort.h"
#include "comb-sort.h"
#include "heap-tests.h"
#include "hoare-partition.h"
#include "hybrid-hierarchysort.h"
#include "in-place-hierarchysort.h"
#include "insertion-sort.h"
#include "int-that-tracks-comparisons.h"
#include "interlaced-double-binary-heap.h"
#include "interlaced-entangled-double-binary-heap.h"
#include "max-heap.h"
#include "median-of-medians.h"
#include "min-heap.h"
#include "ordered-max-heap.h"
#include "ordered-min-heap.h"
#include "out-of-place-hierarchysort.h"
#include "print.h"
#include "quicksort.h"
#include "reverse.h"
#include "semi-stable-partition.h"
#include "shell-sort.h"
#include "sift.h"
#include "sorted.h"
#include "spindle.h"
#include "stable-partition.h"

//typedef int current_type;
typedef IntThatTracksComparisons::IntThatTracksComparisons current_type;

int main()
{
	//HeapTests::heap_tests();
	const long size = 1000000;
	const long tuple_size = 2;
	std::vector<current_type> data(size);
	for (std::size_t i = 0; i < size; i += 1)
	{
		/*if ((i % 2) == 0)
		{
			data[i] = size/2;
			continue;
		}*/
		data[i] = size - i;
	}
	
	std::random_device random_device;
	std::mt19937 random_number_generator(random_device());
	random_number_generator.seed(26);
	std::shuffle(&data[0], (&data[size-1]) + 1, random_number_generator);
	
	//Print::print((current_type*)data.data(), -1, size);
	
	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);

	//IntThatTracksComparisons::reset_comparisons();

	//Hierarchysort::in_place<current_type>((current_type*)data.data(), -1, size);
	std::vector<long> gap_sequence1 = ShellSort::tokuda_gap_sequence;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::generalized_ciura4, 25);
	std::vector<long> gap_sequence2 = ShellSort::extrapolated_ciura_tokuda1;
	//std::vector<long> gap_sequence2 = ShellSort::gap_sequence_generator(ShellSort::extrapolated_ciura, 20);
	//std::vector<long> gap_sequence2 = ShellSort::extrapolated_ciura_tokuda3;
	ShellSort::empirical_comparison_range(gap_sequence1, gap_sequence2, 45000, 120000, 40991, 41200, 41);
	//ShellSort::empirical_comparison(gap_sequence1, gap_sequence2, 2, 15000, 1000);

	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40935, 88296769 : 88224339 (-72430) // ShellSort::empirical_comparison_range(gap_sequence1, gap_sequence2, 45000, 120000, 40945 - 10, 40945 + 10, 41);
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40936, 88194699 : 88123935 (-70764)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40937, 79492941 : 79329700 (-163241)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40938, 84978806 : 84854400 (-124406)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40939, 78041655 : 77948531 (-93124)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40940, 90603333 : 90493122 (-110211)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40941, 79549956 : 79483272 (-66684)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40942, 87789291 : 87729656 (-59635)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40943, 83697617 : 83570929 (-126688)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40944, 83643938 : 83500182 (-143756)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40945, 82626179 : 82528659 (-97520)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40946, 91109895 : 91006964 (-102931)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40947, 85662969 : 85492205 (-170764)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40948, 80436279 : 80308970 (-127309)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40949, 95248503 : 95168297 (-80206)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40950, 82325021 : 82160529 (-164492)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40951, 80910668 : 80803103 (-107565)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40952, 87951706 : 87870788 (-80918)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40953, 82806056 : 82649345 (-156711)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40954, 83504768 : 83358925 (-145843)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40955, 82424696 : 82265366 (-159330)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40956, 84531007 : 84393430 (-137577)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40957, 87911820 : 87797138 (-114682)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40958, 87205229 : 87114769 (-90460)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40959, 82508240 : 82416934 (-91306)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40960, 87157449 : 87084662 (-72787)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40961, 90864233 : 90678219 (-186014)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40962, 83009799 : 82833320 (-176479)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40963, 81214270 : 81055936 (-158334)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40964, 84243655 : 84129054 (-114601)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40965, 82571229 : 82486314 (-84915)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40966, 81606919 : 81493888 (-113031)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40967, 86586548 : 86428347 (-158201)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40968, 81149494 : 81049707 (-99787)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40969, 82013539 : 81793919 (-219620)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40970, 83014220 : 82880420 (-133800)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40971, 81980319 : 81918204 (-62115)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40972, 83206457 : 83092116 (-114341)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40973, 81224711 : 81128291 (-96420)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40974, 85970895 : 85826466 (-144429)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40975, 87083082 : 86958216 (-124866)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40976, 91331177 : 91177584 (-153593)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40977, 83920970 : 83830379 (-90591)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40978, 87943423 : 87858777 (-84646)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40979, 80770948 : 80650901 (-120047)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40980, 85577988 : 85463933 (-114055)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40981, 80748141 : 80613582 (-134559)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40982, 78934654 : 78774048 (-160606)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40983, 86683407 : 86640841 (-42566)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40984, 91942750 : 91791010 (-151740)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40985, 83750769 : 83614087 (-136682)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40986, 85739037 : 85616624 (-122413)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40987, 88809993 : 88776265 (-33728)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40988, 86590080 : 86464378 (-125702)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40989, 88182840 : 88089894 (-92946)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40990, 82897307 : 82708251 (-189056)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40991, 90001934 : 89931741 (-70193)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40992, 83668872 : 83663191 (-5681)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40993, 82964209 : 82793892 (-170317)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40994, 88471356 : 88460270 (-11086)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40995, 83408441 : 83367886 (-40555)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40996, 83645931 : 83585028 (-60903)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40997, 81743212 : 81559876 (-183336)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40998, 85331523 : 85173809 (-157714)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 40999, 85952355 : 85815044 (-137311)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41000, 87346082 : 87234888 (-111194)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41001, 86144982 : 86104858 (-40124)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41002, 87295895 : 87192909 (-102986)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41003, 88533881 : 88528987 (-4894)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41004, 84522157 : 84357897 (-164260)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41005, 83008187 : 82891836 (-116351)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41006, 86456825 : 86363396 (-93429)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41007, 90249548 : 90114027 (-135521)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41008, 79006443 : 78876134 (-130309)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41009, 82649817 : 82559562 (-90255)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41010, 85552362 : 85524045 (-28317)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41011, 84205988 : 84094171 (-111817)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41012, 89827757 : 89697946 (-129811)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41013, 86036618 : 85884069 (-152549)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41014, 87939110 : 87862828 (-76282)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41015, 91067864 : 90935502 (-132362)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41016, 80747603 : 80637833 (-109770)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41017, 82735348 : 82641859 (-93489)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41018, 84739638 : 84602171 (-137467)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41019, 82166957 : 82084765 (-82192)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41020, 82149382 : 82015385 (-133997)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41021, 82868381 : 82721075 (-147306)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41022, 85856017 : 85784789 (-71228)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41023, 85916342 : 85724571 (-191771)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41024, 84404756 : 84271227 (-133529)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41025, 82729522 : 82587592 (-141930)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41026, 83758610 : 83690960 (-67650)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41027, 82619105 : 82522172 (-96933)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41028, 89110047 : 88918177 (-191870)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41029, 89107053 : 88989599 (-117454)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41030, 90118065 : 89972901 (-145164)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41031, 84060545 : 83923948 (-136597)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41032, 92869452 : 92756967 (-112485)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41033, 84994435 : 84824535 (-169900)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41034, 85893245 : 85783924 (-109321)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41035, 81317326 : 81159034 (-158292)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41036, 90668930 : 90603965 (-64965)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41037, 84129739 : 84003351 (-126388)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41038, 84960173 : 84898170 (-62003)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41039, 78608279 : 78503209 (-105070)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41040, 80544235 : 80437069 (-107166)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41041, 83860451 : 83754155 (-106296)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41042, 85096060 : 84874346 (-221714)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41043, 80937969 : 80891390 (-46579)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41044, 82460677 : 82381464 (-79213)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41045, 85872617 : 85693206 (-179411)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41046, 87343289 : 87222875 (-120414)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41047, 77125859 : 77001623 (-124236)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41048, 82404304 : 82267376 (-136928)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41049, 83879475 : 83755111 (-124364)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41050, 91126681 : 91030516 (-96165)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41051, 82894491 : 82836887 (-57604)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41052, 95202120 : 95048320 (-153800)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41053, 82082132 : 81965877 (-116255)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41054, 81469223 : 81486640 (17417)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41055, 87266542 : 87128285 (-138257)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41056, 84498067 : 84412249 (-85818)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41057, 81642850 : 81600788 (-42062)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41058, 86457635 : 86285665 (-171970)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41059, 86698235 : 86657423 (-40812)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41060, 83575546 : 83445020 (-130526)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41061, 85183365 : 85069725 (-113640)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41062, 79290520 : 79229485 (-61035)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41063, 82209489 : 82116587 (-92902)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41064, 84463614 : 84394413 (-69201)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41065, 88178726 : 88059114 (-119612)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41066, 84304185 : 84173148 (-131037)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41067, 82620197 : 82498521 (-121676)
    //1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41068, 83221369 : 83123579 (-97790)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41069, 90922690 : 90882508 (-40182)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41070, 90304264 : 90202987 (-101277)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41071, 80353028 : 80205877 (-147151)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41072, 79873669 : 79777827 (-95842)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41073, 85386428 : 85294011 (-92417)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41074, 82591788 : 82423369 (-168419)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41075, 94658040 : 94567817 (-90223)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41076, 86332532 : 86219843 (-112689)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41077, 89327388 : 89230076 (-97312)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41078, 86658936 : 86469968 (-188968)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41079, 84391390 : 84317864 (-73526)
	//1, 4, 10, 23, 57, 142, 361, 925, 2383, 6150, 15870, 41080, 82222256 : 82066243 (-156013)
	
	//long long comparisons = IntThatTracksComparisons::get_comparisons();

	//Sorted::verify((current_type*)data.data(), -1, size);
	//Print::print((current_type*)data.data(), -1, size);

	//HeapTests::test_min_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_min_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	//HeapTests::test_max_heap_alignment<current_type>((current_type*)data.data(), -1, size, tuple_size);
	
	//std::cout << comparisons << std::endl;
	//float cost_per_element = ((float)comparisons) / size;
	//std::cout << cost_per_element << std::endl;

	char word;
	std::cin >> word;
	return 0;
}